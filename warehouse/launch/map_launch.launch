<launch>
  <!-- _______________________________________Pass all this to launch file in map_creator node__________________________________________________ -->
  <arg name="ns_prefix" default="/eval_sim" />

  <!-- Match the number of robots you deploy. E.g. 2 jackals and 2 burgers = 4 robots -->
  <arg name="num_robots" default="1" />
  <arg name="num_envs" default="1" />
  
  <!-- train mode = true because we want to publish to cmd_vel directly and not to cmd_vel_pub (which is sued for the action publisher) -->
  <arg name="train_mode"       default="true"/>

  <!-- To make the training more efficient make sure this step_size*laser_update_rate == 1  -->
  <arg name="step_size" default="0.01"/>
  <arg name="update_rate" default="250"/>
  <arg name="show_viz"  default="true"/>
  <arg name="viz_pub_rate" default="30" />

  <!-- the folder name under the path arena-simulation-setup/maps  -->
  <arg name="map_folder_name" default="gridworld" />
  <arg name="map_path" default="$(find arena-simulation-setup)/maps/$(arg map_folder_name)/map.yaml" />
  
  <!-- the velocity of randomly genelized obstacles  -->
  <arg name="obs_vel" default="0.3" />
  <!-- if it's false flatland server will not publish any debug related infomation and you will not able to visuzalize e.g robot, dynamic obstacles  -->

  <!-- If observations contain the previous actions -->
  <arg name="actions_in_obs" default="true" />

  <!-- parameter for warehouse szenario: observation space is changed -->
  <arg name="warehouse" default="true" />

  <!-- parameter for warehouse szenario: observation space is changed -->
  <arg name="observable_task_goals" default="5" />
<!-- _________________________________________________________________________________ -->

  <!--  PARAMS DON'T CHANGE THEM  -->
  <param name="path" value="/warehouse/example_grid" />
  <param name="update_rate" value="$(arg update_rate)" />
  <param name="use_sim_time" value="true" />
  <param name="train_mode" value="$(arg train_mode)" />
  <param name="num_envs" value="$(arg num_envs)" />
  <param name="num_robots" value="$(arg num_robots)" />
  <param name="step_size" value="$(arg step_size)" /> 
  <param name="obs_vel" value="$(arg obs_vel)" /> 
  <param name="world_path" value="$(find arena-simulation-setup)/maps/$(arg map_folder_name)/map.world.yaml" />
  <param name="show_viz" value="$(arg show_viz)"/>
  <param name="viz_pub_rate" value="$(arg viz_pub_rate)"/>
  <param name="robot_action_rate"     value="5"/>
  <param name="laser_update_rate"     value="10"/>
  <param name="actions_in_obs" value="$(arg actions_in_obs)" />


  <arg name="shelf_cols" default="1"/>
  <arg name="shelf_rows" default="1"/>
  <arg name="col_height" default="5"/>
  <arg name="bigger_highways" default="True"/>
  <arg name="random_map" default="False"/>
  <arg name="add_goals" default="None"/>
  <!-- Gridworld Nodes, start Map_server from map_creator -->
  <node name="map_creator" pkg="warehouse" type="gridworld.py" output="screen" clear_params="true" 
                args="shelf_cols:=$(arg shelf_cols) shelf_rows:=$(arg shelf_rows) col_height:=$(arg col_height) scale:=100
                bigger_highways:=$(arg bigger_highways) random_map:=$(arg random_map) add_goals:=$(arg add_goals)
                ns_prefix:=$(arg ns_prefix) num_robots:=$(arg num_robots) map_folder_name:=$(arg map_folder_name) map_path:=$(arg map_path)"> 

              <remap from="/gridworld_base" to="/$(arg ns_prefix)/gridworld_base" />
        </node>

</launch>