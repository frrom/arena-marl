<launch>
  <!-- For eval we only use one environment -->
  <arg name="ns_prefix" default="/eval_sim" />

  <!-- Match the number of robots you deploy. E.g. 2 jackals and 2 burgers = 4 robots -->
  <arg name="num_robots" default="1" />
  
  <!-- train mode = true because we want to publish to cmd_vel directly and not to cmd_vel_pub (which is sued for the action publisher) -->
  <arg name="train_mode"       default="true"/>

  <!-- To make the training more efficient make sure this step_size*laser_update_rate == 1  -->
  <arg name="step_size" default="0.1"/>
  <arg name="update_rate" default="250"/>
  <arg name="show_viz"  default="true"/>
  <arg name="viz_pub_rate" default="30" />

  <!-- the folder name under the path arena-simulation-setup/maps  -->
  <arg name="map_folder_name" default="gridworld" />
  <arg name="map_path" default="$(find arena-simulation-setup)/maps/$(arg map_folder_name)/map.yaml" />

  <!-- the velocity of randomly genelized obstacles  -->
  <arg name="obs_vel" default="0.3" />
  <!-- if it's false flatland server will not publish any debug related infomation and you will not able to visuzalize e.g robot, dynamic obstacles  -->

  <!-- If observations contain the previous actions -->
  <arg name="actions_in_obs" default="true" />

  <!-- parameter for warehouse szenario: observation space is changed -->
  <arg name="warehouse" default="true" />

  <!-- parameter for warehouse szenario: observation space is changed -->
  <arg name="observable_task_goals" default="5" />
  <arg name="num_ports" default="2" />


  <arg name="choose_goal" default="false" />

  <!--  PARAMS DON'T CHANGE THEM  -->
  <param name="warehouse" value="$(arg warehouse)" />
  <param name="observable_task_goals" value="$(arg observable_task_goals)" />
  <param name="num_ports" value="$(arg num_ports)" />
  <param name="update_rate" value="$(arg update_rate)" />
  <param name="use_sim_time" value="true" />
  <param name="train_mode" value="$(arg train_mode)" />
  <param name="num_robots" value="$(arg num_robots)" />
  <param name="step_size" value="$(arg step_size)" /> 
  <param name="obs_vel" value="$(arg obs_vel)" /> 
  <param name="world_path" value="$(find arena-simulation-setup)/maps/$(arg map_folder_name)/map.world.yaml" />
  <param name="show_viz" value="$(arg show_viz)"/>
  <param name="viz_pub_rate" value="$(arg viz_pub_rate)"/>
  <param name="robot_action_rate"     value="5"/>
  <param name="laser_update_rate"     value="10"/>
  <param name="actions_in_obs" value="$(arg actions_in_obs)" />
  <param name="prefix" value="$(arg ns_prefix)" />


  <!-- map server-->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_path)">
    <!-- In multi-env training /clock not available, since we only want one map_server, it's clock topic is remapped to /clock -->
    <remap from="/clock" to="/$(arg ns_prefix)/clock" />
  </node>

  <!-- <group if="$(eval arg('train_mode') == false)">
  makes sure that action's will be published according to sim time in eval mode
    <node name="action_publisher" pkg="arena_local_planner_drl" type="action_publisher.py"/>
  </group> -->

  <!-- set the log format -->
  <env name="ROSCONSOLE_FORMAT" value="[${severity} ${time} ${logger}]: ${message}" />

  <!-- Start one evaluation environment -->
  <include file="$(find arena_bringup)/launch/sublaunch_training/marl_single_env_training.launch">
    <arg name="ns" value="eval_sim" />
    <arg name="num_robots" value="$(arg num_robots)" />
    <arg name="warehouse" value="$(arg warehouse)" />
  </include>

  <include file="$(find arena_bringup)/launch/visualization_training.launch">
    <arg name="rviz_file" value="nav_MARL" />
    <arg name="ns" value="eval_sim" />
    <arg name="warehouse" value="$(arg warehouse)" />
  </include> 

</launch>